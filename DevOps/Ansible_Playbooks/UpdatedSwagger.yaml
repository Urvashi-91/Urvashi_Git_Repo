swagger: "2.0"
info:
  description: "User management Web API"
  version: "1.0.0"
  title: "User management"
  
host: "brilliant.server"
basePath: "/v1"

schemes:
- "https"
- "http"
paths:
 
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/{id}:
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid id supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user email"
      description: "This can be used to update only the email  ( or any other fields if required )."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "id whose email needs to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user id supplied"
        "404":
          description: "User not found"
    get:
      tags:
      - "user"
      summary: "Get user by user id"
      description: "Get user by user id"
      operationId: "getUserByid"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Id of the user that needs to be fetched."
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid user id supplied"
        "404":
          description: "User not found"
          
          
  /user/getUsersByLocation/{location}:
    get:
      tags:
      - "user"
      summary: "Get users by location"
      description: "This end point will get a list of all users in a given location."
      operationId: "getUsersByLocation"
      produces:
      - "application/json"
      parameters:
      - name: "location"
        in: "path"
        description: "Name of the location"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserList"
        "400":
          description: "Invalid location supplied"
        "404":
          description: "location not found
          
  /user/getUsersLoggedSince/{datetime}:
    get:
      tags:
      - "user"
      summary: "Get users logged in since a given date time"
      description: "list of all users logged in since a given date time"
      operationId: "getUsersLoggedSince"
      produces:
      - "application/json"
      parameters:
      - name: "datetime"
        in: "path"
        description: "Date time"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserList"
        "400":
          description: "Invalid location supplied"
        "404":
          description: "location not found"
          
  /user/updatePassword/{id}:
    put:
      tags:
      - "user"
      summary: "Updated user password"
      description: "This can be used to update user password."
      operationId: "updatePassword"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "id whose password needs to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated password object"
        required: true
        schema:
          $ref: "#/definitions/UserPassword"
      responses:
        "400":
          description: "Invalid user id supplied"
        "401":
          description: "New and Re Password do not match"
        "402":
          description: "Password critria not fullfilled"
        "404":
          description: "User not found"        
          
  
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      location:
        type: "string"
      password:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
      
  UserList:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          $ref: "#/definitions/User"
    xml:
      name: "UserList"
  
  UserPassword:
    type: "object"
    properties:
      
      oldPassword:
        type: "string"
      newPassword:
        type: "string"
      rePassword:
        type: "string"
     
    xml:
      name: "UserPassword"
 
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"